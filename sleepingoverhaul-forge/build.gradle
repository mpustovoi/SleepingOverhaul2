plugins {
    id 'com.github.johnrengelman.shadow'
}

apply from: '../modprops.gradle'
archivesBaseName = project.archives_base_name
version = project.mod_version + "-Forge-${rootProject.minecraft_version}"
group = project.maven_group

loom {
    accessWidenerPath = project(":${project.modid}-common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "sleepingoverhaul-common.mixins.json"
        mixinConfig "sleepingoverhaul-forge.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":${project.modid}-common", configuration: "namedElements")) { transitive false }
    shadowBundle(project(path: ":${project.modid}-common", configuration: "transformProductionForge"))
    
    // MixinExtras is not included with Forge, add it
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))

    //// Mod compatibilities
    // REI (for finding and giving mod-added stuff) and Cloth Config
    modLocalRuntime("curse.maven:roughly-enough-items-310111:5846923")
    modLocalRuntime("curse.maven:cloth-config-348521:5729105")
    // Comforts (and Spectre lib)
    modImplementation("curse.maven:comforts-276951:5503516")
    modLocalRuntime("curse.maven:spectrelib-993948:5217603")
    // Sleep Tight (and Moonlight/Selene Lib)
    modImplementation("curse.maven:sleep-tight-817564:5085863")
    modLocalRuntime("curse.maven:selene-499980:5478857")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    //exclude "fabric.mod.json"
    //exclude "architectury.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    //dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":${project.modid}-common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

/*
components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
*/
